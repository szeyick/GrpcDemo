language: go

addons:
  sonarcloud:
    organization: "szeyick-github"
    token:
      secure: "Ss3KX7j3NVEtpH/E1Jw9a8ub2mbZjyJQkBnppoZ0Yvq00kRjhAdBOGxvMU9+aHaHifGB95dtG7gJIMhQTNBtWecq6C+rkyzhppOC3arMKEKF8s/qhGJ2nsglVuuNtkMOGoZNvZ0WH5xf/19TIaHDmR2+K/jISZOMqbi45okXBHuAnwGLIywEdSH4pGaRRjixAB7mggM+tUzgWy3KTZUEh6vUDDroIyM9VgxbM6dLdrpOLHSTtRw5YmKeJgppxU7nDdo0Sd3ejJuapu+OrQ2orG35kuZXT78pKQ4dAQfWLW6ndVALjvQAHawbl14/dXHR92Zq1sfOUonGml5h8T+7XHua64tjVMW6dGvpuf68yLbpT2J1lEJ3uOmhPCo48RgRQ5yXuU+lNE1iMMcNJv7FJcpvwbipkUQZf6f4E7DCDbvzOnX79tYuFkkuakifEpzlWQ45RG7iCQz15MbANhUTXWLrz9yxCdRUAmuA/d850VKrx1GVw+mTAGikj1Z0gF3dapHGeln1KFbm2/JYY8331dW/dG/LZZC2p2E1ER/DVpRlZ4j6GsF7SiV0JH3CME9bcD0bJgj9/VxBRBCNTP6zPXLsv7Qmqjn345tUNQy5vF76Q7gCccA+6q1GhjVOfv6CIIyA8jFT2VLtKNzOaA8le6DayfcP8q+wN1V6X1H0h7w="

cache:
  directories:
    - "$HOME/.m2/repository"
    - "$HOME/.sonar/cache"

# Force-enable Go modules. Also force go to use the code in vendor/
# These will both be unnecessary when Go 1.14 lands.
#env: GO111MODULE=on

# Only clone the most recent commit.
#git:
#  depth: false

before_install:
  - curl -L https://github.com/protocolbuffers/protobuf/releases/download/v3.6.1/protoc-3.6.1-linux-x86_64.zip -o /tmp/protoc.zip
  - unzip /tmp/protoc.zip -d $HOME/protoc
  - export PATH=$HOME/protoc/bin:$PATH
  - go get -u google.golang.org/grpc
  - go get -u github.com/golang/protobuf/protoc-gen-go
  - go get github.com/golang/mock/mockgen
  - go get github.com/golang/mock/gomock
  - echo $GOPATH
  - $GOPATH/bin/mockgen -source=models/model.go -package=mocks -destination=mocks/mock_model.go
  # - mockgen -source=models/model.go -package=mocks -destination=mocks/mock_model.go

# Skip the install step. Don't `go get` dependencies. Only build with the code
# in vendor/
install:
  - travis_retry go get github.com/stretchr/testify

# Don't email me the results of the test runs.
notifications:
  email: false

# Anything in before_script that returns a nonzero exit code will flunk the
# build and immediately stop. It's sorta like having set -e enabled in bash.
# Make sure you've pinned the version of golangci-lint by running this command
# in your project directory:
#   GO111MODULE=on go get github.com/golangci/golangci-lint@v1.21.0
# You should see this line in your go.mod file:
#   github.com/golangci/golangci-lint v1.21.0
before_script:
  - curl -sfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh| sh -s -- -b $(go env GOPATH)/bin v1.21.0

# script always runs to completion (set +e). If we have linter issues AND a
# failing test, we want to see both. Configure golangci-lint with a
# .golangci.yml file at the top level of your repo.
script:
#  - sonar-scanner
#  - golangci-lint run       # run a bunch of code checkers/linters in parallel
#  - go test -v -race ./...  # Run all the tests with the race detector enabled
   # Execute tests and coverage
  - go test -json -v ./... > report.json
  - go test -coverprofile=coverage.out -v ./...
  # And then execute SonarCloud analysis which will run its own code analysis, and also reuse the linters' results
  - sonar-scanner
